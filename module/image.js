// http://p0.so.qhimgs1.com/bdr/_240_/t01ce327258da4bddbc.jpglet Bower = require('./bower')let config = require('../config/index').imagelet tool = require('../tool/index')let cheerio = require('cheerio')let request = require("request")let fs = require("fs")let path = require("path")let Jimp = require('jimp')var download = function (url, dir, filename, callback) {  request.head(url, function (err, res, body) {    request(url).pipe(fs.createWriteStream(dir + "/" + filename))    callback()  })}class Imager {  constructor() {    this.bower = new Bower()    this.gread = 'MNHQ&OC?7>!:-;.'    this.jibie = 255 / this.gread.length  }  getGread(num) {    return Math.round(num)  }  rgbTransform(r, g, b){    let NumberOfShades = 10    let ConversionFactor = 255 / (NumberOfShades - 1)    let AverageValue = (r + g + b) / 3    let Gray = Math.round((AverageValue / ConversionFactor) + 0.5) * ConversionFactor    return Gray  }  rgbTransform2(r, g, b){    return r * 0.299 + g * 0.587 + b * 0.114  }  rgbTransform3(r, g, b){    return Math.min(...[r, g, b])  }  rgbTransform4(r, g, b){    return (r+g+b) / 3  }  rgbTransForm5(r, g, b){    return (0.2126*r + 0.7152*g + 0.0722*b)  }  toShow(pixels) {    var str = ''    var width = pixels.bitmap.width    var height = pixels.bitmap.height    for (var i = 0; i < height; i++) {      for (var j = 0; j < width; j++) {        let rgba = Jimp.intToRGBA(pixels.getPixelColor(j, i));        var r = rgba.r        var g = rgba.g        var b = rgba.b        let grr = this.rgbTransform(r, g, b);        if (grr >= 250) {          str += ' '        } else {          str += this.gread.charAt(Math.round(grr / this.jibie))        }      }      str += '\n'    }    console.log(str)  }  getImageString(cmdArguments, imageWidth) {    if (!cmdArguments) {      console.log('请输入要搜索的图片名称！')      return    }    this.bower.openPage(      config.url + encodeURI(cmdArguments),      data => {        let $ = cheerio.load(data);        let imgList = $(config.imgClassName)        let imgSrc = ''        let ggArray = []        imgList.each((index, value) => {          let img = $(value).attr('src') || $(value).attr('data-src')          if (img != '' && img.indexOf('base64') == -1) {            ggArray.push(img)          }        })        imgSrc = ggArray[tool.randomRange(0, ggArray.length - 1)]        Jimp.read(imgSrc, (err, image)=>{          if(err) {            console.log('渲染出错')            console.log(err)            return          }          let imgSize = Math.min(config.size, image.bitmap.width)          let userSize = parseInt(imageWidth)          if(!isNaN(userSize)) {            imgSize = Math.min(userSize, 2000)          }          // image.getPixelColor(x, y); // returns the colour of that pixel e.g. 0xFFFFFFFF          let resizeImage = image.resize(imgSize, Jimp.AUTO);          this.toShow(resizeImage)        });      },      error => {        console.log(config.error)      }    )  }}module.exports = {  consoleImageString: function (cmdArguments, width) {    new Imager().getImageString(cmdArguments, width)  }}